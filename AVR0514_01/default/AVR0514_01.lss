
AVR0514_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000194  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800124  00800124  0000024c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000086  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000216  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a6  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000238  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000eb  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  00000a73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 32       	cpi	r26, 0x26	; 38
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  c6:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <TIMER_Init>:
	return 0;
}

void TIMER_Init(void){

	TCCR2 = 0x0D;	
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 38;
  d2:	86 e2       	ldi	r24, 0x26	; 38
  d4:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<OCIE2);	
  d6:	87 b7       	in	r24, 0x37	; 55
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	87 bf       	out	0x37, r24	; 55
}
  dc:	08 95       	ret

000000de <__vector_9>:

ISR(TIMER2_COMP_vect)   //5msec
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	0b b6       	in	r0, 0x3b	; 59
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
        static  uint8_t  Count         =   0;
        static  uint8_t  Count_1sec  =  0;

        Count++;
  f4:	80 91 25 01 	lds	r24, 0x0125
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 25 01 	sts	0x0125, r24
        if(Count == 200){  //5m * 200 = 1000msec = 1000 * 0.001 = 1sec
  fe:	88 3c       	cpi	r24, 0xC8	; 200
 100:	59 f0       	breq	.+22     	; 0x118 <__vector_9+0x3a>
               if(Count_1sec == 12)  Count_1sec  =  0;
               Count_1sec++;
               Count   =     0; 
        }

}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0b be       	out	0x3b, r0	; 59
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti
        static  uint8_t  Count         =   0;
        static  uint8_t  Count_1sec  =  0;

        Count++;
        if(Count == 200){  //5m * 200 = 1000msec = 1000 * 0.001 = 1sec
               UDR0  = Test[Count_1sec];
 118:	90 91 24 01 	lds	r25, 0x0124
 11c:	e9 2f       	mov	r30, r25
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	e8 5e       	subi	r30, 0xE8	; 232
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	80 81       	ld	r24, Z
 126:	8c b9       	out	0x0c, r24	; 12
               if(Count_1sec == 12)  Count_1sec  =  0;
 128:	9c 30       	cpi	r25, 0x0C	; 12
 12a:	31 f0       	breq	.+12     	; 0x138 <__vector_9+0x5a>
               Count_1sec++;
 12c:	9f 5f       	subi	r25, 0xFF	; 255
 12e:	90 93 24 01 	sts	0x0124, r25
               Count   =     0; 
 132:	10 92 25 01 	sts	0x0125, r1
 136:	e5 cf       	rjmp	.-54     	; 0x102 <__vector_9+0x24>
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	f8 cf       	rjmp	.-16     	; 0x12c <__vector_9+0x4e>

0000013c <main>:

void TIMER_init(void);

int main(void){

	UART_Init();
 13c:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_Init>
	return 0;
}

void TIMER_Init(void){

	TCCR2 = 0x0D;	
 140:	8d e0       	ldi	r24, 0x0D	; 13
 142:	85 bd       	out	0x25, r24	; 37
	OCR2 = 38;
 144:	86 e2       	ldi	r24, 0x26	; 38
 146:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<OCIE2);	
 148:	87 b7       	in	r24, 0x37	; 55
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	87 bf       	out	0x37, r24	; 55

int main(void){

	UART_Init();
	TIMER_Init();
	UART_PutString("\r\n\r\n--- 안녕!! --- \r\n\r\n");
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 bc 00 	call	0x178	; 0x178 <UART_PutString>

	sei();    //Global interrupt enable -->  인터럽트 사용이 여러개 동시에 이루어지는데 그것을 사용하게 하라
 156:	78 94       	sei
 158:	ff cf       	rjmp	.-2      	; 0x158 <main+0x1c>

0000015a <UART_Init>:
#include <stdint.h>


void UART_Init(void)
{
	UCSR0A = 0x00;
 15a:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x98;
 15c:	88 e9       	ldi	r24, 0x98	; 152
 15e:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	80 93 95 00 	sts	0x0095, r24
	UBRR0H = 0;
 166:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 12;
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	89 b9       	out	0x09, r24	; 9
}
 16e:	08 95       	ret

00000170 <UART_PutChar>:

void UART_PutChar(uint8_t Data){

	while((UCSR0A & 0x20) == 0);
 170:	5d 9b       	sbis	0x0b, 5	; 11
 172:	fe cf       	rjmp	.-4      	; 0x170 <UART_PutChar>
	UDR0 = Data;
 174:	8c b9       	out	0x0c, r24	; 12
}
 176:	08 95       	ret

00000178 <UART_PutString>:

void UART_PutString( const char *String){
 178:	fc 01       	movw	r30, r24
	
	while(*String){
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	39 f0       	breq	.+14     	; 0x18e <UART_PutString+0x16>
	UBRR0L = 12;
}

void UART_PutChar(uint8_t Data){

	while((UCSR0A & 0x20) == 0);
 180:	5d 9b       	sbis	0x0b, 5	; 11
 182:	fe cf       	rjmp	.-4      	; 0x180 <UART_PutString+0x8>
	UDR0 = Data;
 184:	8c b9       	out	0x0c, r24	; 12

void UART_PutString( const char *String){
	
	while(*String){
		UART_PutChar(*String);
		String++;
 186:	31 96       	adiw	r30, 0x01	; 1
	UDR0 = Data;
}

void UART_PutString( const char *String){
	
	while(*String){
 188:	80 81       	ld	r24, Z
 18a:	88 23       	and	r24, r24
 18c:	c9 f7       	brne	.-14     	; 0x180 <UART_PutString+0x8>
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
