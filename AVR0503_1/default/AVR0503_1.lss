
AVR0503_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  000001b2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080014c  0080014c  00000292  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000af  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000214  00000000  00000000  00000381  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016e  00000000  00000000  00000595  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00000703  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f7  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  00000ad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 34       	cpi	r26, 0x4C	; 76
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ac e4       	ldi	r26, 0x4C	; 76
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  c6:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <UART_Control>:
        while(1){
           UART_Control();
        }
        return  0;
}
void   UART_Control(void){
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	0f 92       	push	r0
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
        byte  Data;
        if(UART_GetChar(&Data) == 0)   return;
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	0e 94 cb 00 	call	0x196	; 0x196 <UART_GetChar>
  e0:	88 23       	and	r24, r24
  e2:	19 f0       	breq	.+6      	; 0xea <UART_Control+0x1c>
        UART_PutChar(Data);
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	0e 94 a9 00 	call	0x152	; 0x152 <UART_PutChar>
}
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	08 95       	ret

000000f2 <main>:
#include  "uart.h"

void   UART_Control(void);
int     main(void)
{
        UART_Init();     
  f2:	0e 94 9e 00 	call	0x13c	; 0x13c <UART_Init>
        UART_PutChar('A'); UART_PutChar('V'); UART_PutChar('R'); 
  f6:	81 e4       	ldi	r24, 0x41	; 65
  f8:	0e 94 a9 00 	call	0x152	; 0x152 <UART_PutChar>
  fc:	86 e5       	ldi	r24, 0x56	; 86
  fe:	0e 94 a9 00 	call	0x152	; 0x152 <UART_PutChar>
 102:	82 e5       	ldi	r24, 0x52	; 82
 104:	0e 94 a9 00 	call	0x152	; 0x152 <UART_PutChar>
        UART_PutChar('\r'); UART_PutChar('\n'); 
 108:	8d e0       	ldi	r24, 0x0D	; 13
 10a:	0e 94 a9 00 	call	0x152	; 0x152 <UART_PutChar>
 10e:	8a e0       	ldi	r24, 0x0A	; 10
 110:	0e 94 a9 00 	call	0x152	; 0x152 <UART_PutChar>
        UART_PutString("===================\r\n");
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_PutString>
        UART_PutString("ATmega128 Test Programming\r\n");
 11c:	86 e1       	ldi	r24, 0x16	; 22
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_PutString>
        UART_PutString("ATmega128 -- Welcome!!\r\n");
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_PutString>
        UART_PutString("===================\r\n");
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_PutString>
        sei();    //SREG.7  =  1;
 134:	78 94       	sei
        while(1){
           UART_Control();
 136:	0e 94 67 00 	call	0xce	; 0xce <UART_Control>
 13a:	fd cf       	rjmp	.-6      	; 0x136 <main+0x44>

0000013c <UART_Init>:
byte     UART_Flag      =   0;


void UART_Init(void){

	UCSR0A = 0x00; // 00(1)0 0000  ---->  UDRE0(우체통이 비어있다 --> 1)
 13c:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x98; // 1001 1000    ---->  수신할때 인터럽트를 활용하겠다 송수신을 사용하겠다.
 13e:	88 e9       	ldi	r24, 0x98	; 152
 140:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06; // 0000 0110    ----> 데이터 송수신을 8비트로 활용하겠다.
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	80 93 95 00 	sts	0x0095, r24
	
	UBRR0H = 0;
 148:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 12;   // 계산이 개입  ----> (8000000 / (16*38400)) - 1 = 12
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	89 b9       	out	0x09, r24	; 9
}
 150:	08 95       	ret

00000152 <UART_PutChar>:

void UART_PutChar(byte Data){
                                    //  ??(1/0)? ????
	while((UCSR0A & 0x20) == 0);    //  0010     0000 &
 152:	5d 9b       	sbis	0x0b, 5	; 11
 154:	fe cf       	rjmp	.-4      	; 0x152 <UART_PutChar>
	                                //  00(0/1)0 0000
	UDR0 = Data;
 156:	8c b9       	out	0x0c, r24	; 12

}
 158:	08 95       	ret

0000015a <UART_PutString>:

void      UART_PutString(const char  *String)        // const char  *String = "korea"(null)
{
 15a:	fc 01       	movw	r30, r24
            while(*String){
 15c:	80 81       	ld	r24, Z
 15e:	88 23       	and	r24, r24
 160:	39 f0       	breq	.+14     	; 0x170 <UART_PutString+0x16>
	UBRR0L = 12;   // 계산이 개입  ----> (8000000 / (16*38400)) - 1 = 12
}

void UART_PutChar(byte Data){
                                    //  ??(1/0)? ????
	while((UCSR0A & 0x20) == 0);    //  0010     0000 &
 162:	5d 9b       	sbis	0x0b, 5	; 11
 164:	fe cf       	rjmp	.-4      	; 0x162 <UART_PutString+0x8>
	                                //  00(0/1)0 0000
	UDR0 = Data;
 166:	8c b9       	out	0x0c, r24	; 12

void      UART_PutString(const char  *String)        // const char  *String = "korea"(null)
{
            while(*String){
                 UART_PutChar(*String);
                 String++;
 168:	31 96       	adiw	r30, 0x01	; 1

}

void      UART_PutString(const char  *String)        // const char  *String = "korea"(null)
{
            while(*String){
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	c9 f7       	brne	.-14     	; 0x162 <UART_PutString+0x8>
 170:	08 95       	ret

00000172 <__vector_18>:
                 UART_PutChar(*String);
                 String++;
           }
}

ISR(USART0_RX_vect){
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	8f 93       	push	r24
            UART_Buffer  =  UDR0;
 17e:	8c b1       	in	r24, 0x0c	; 12
 180:	80 93 4d 01 	sts	0x014D, r24
            UART_Flag     =  1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 4c 01 	sts	0x014C, r24
}
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <UART_GetChar>:

byte      UART_GetChar(byte  *Data)
{
 196:	fc 01       	movw	r30, r24
            if(UART_Flag){
 198:	80 91 4c 01 	lds	r24, 0x014C
 19c:	88 23       	and	r24, r24
 19e:	31 f0       	breq	.+12     	; 0x1ac <UART_GetChar+0x16>
                 *Data         =  UART_Buffer;
 1a0:	80 91 4d 01 	lds	r24, 0x014D
 1a4:	80 83       	st	Z, r24
                 UART_Flag  =  0;
 1a6:	10 92 4c 01 	sts	0x014C, r1
 1aa:	81 e0       	ldi	r24, 0x01	; 1
                 return   1;
            }else{
                 return   0;
            }
}
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
