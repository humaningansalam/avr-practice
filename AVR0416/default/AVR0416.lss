
AVR0416.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000020e  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000050  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e0  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000130  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000dd  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a1  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000007f  00000000  00000000  000007e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
void  LED_OnOff(unsigned  char  Data);
void  Delay(unsigned  long  Delay);
unsigned  char  LED_Pattern[18] = 
{0x00, 0x20, 0x30, 0x38, 0x3C, 0x3E, 0x3F, 0x3E, 0x3C,
0x38, 0x30, 0x20, 0x00, 0x15, 0x2A, 0x15, 0x2A, 0x3F};
int   main(void){
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <main+0x6>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <main+0x8>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
              }
      }
      return   0;
}
void  LED_Init(void)
{       DDRF   =  0xFC;    // 1111  1100
  ca:	8c ef       	ldi	r24, 0xFC	; 252
  cc:	80 93 61 00 	sts	0x0061, r24
        PORTF  =  0xFC;   // 1111  1100
  d0:	80 93 62 00 	sts	0x0062, r24
}
void  LED_OnOff(unsigned  char  Data)
{
        PORTF  =  (PORTF  |  0xFC)  &  (~(Data<<2) ); //~ : 틸트( ~1010 -->0101 )
  d4:	80 91 62 00 	lds	r24, 0x0062
  d8:	8c 6f       	ori	r24, 0xFC	; 252
  da:	87 75       	andi	r24, 0x57	; 87
  dc:	80 93 62 00 	sts	0x0062, r24
}                                                                          //비트 반전(~)시켜라.
void  Delay(unsigned  long  Delay)
{       volatile  unsigned  long  i;                             // volatile --> 최적화시키지 말라는 뜻.
        for(i=0; i<Delay; i++);                                   //결국 : 시간 지연하는 것. = MCU=CPU = clock다룬다.
  e0:	19 82       	std	Y+1, r1	; 0x01
  e2:	1a 82       	std	Y+2, r1	; 0x02
  e4:	1b 82       	std	Y+3, r1	; 0x03
  e6:	1c 82       	std	Y+4, r1	; 0x04
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	9a 81       	ldd	r25, Y+2	; 0x02
  ec:	ab 81       	ldd	r26, Y+3	; 0x03
  ee:	bc 81       	ldd	r27, Y+4	; 0x04
  f0:	80 5a       	subi	r24, 0xA0	; 160
  f2:	96 48       	sbci	r25, 0x86	; 134
  f4:	a1 40       	sbci	r26, 0x01	; 1
  f6:	b0 40       	sbci	r27, 0x00	; 0
  f8:	a0 f4       	brcc	.+40     	; 0x122 <main+0x64>
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	ab 81       	ldd	r26, Y+3	; 0x03
 100:	bc 81       	ldd	r27, Y+4	; 0x04
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	a1 1d       	adc	r26, r1
 106:	b1 1d       	adc	r27, r1
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	ab 83       	std	Y+3, r26	; 0x03
 10e:	bc 83       	std	Y+4, r27	; 0x04
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	9a 81       	ldd	r25, Y+2	; 0x02
 114:	ab 81       	ldd	r26, Y+3	; 0x03
 116:	bc 81       	ldd	r27, Y+4	; 0x04
 118:	80 5a       	subi	r24, 0xA0	; 160
 11a:	96 48       	sbci	r25, 0x86	; 134
 11c:	a1 40       	sbci	r26, 0x01	; 1
 11e:	b0 40       	sbci	r27, 0x00	; 0
 120:	60 f3       	brcs	.-40     	; 0xfa <main+0x3c>
 122:	20 e0       	ldi	r18, 0x00	; 0
{       DDRF   =  0xFC;    // 1111  1100
        PORTF  =  0xFC;   // 1111  1100
}
void  LED_OnOff(unsigned  char  Data)
{
        PORTF  =  (PORTF  |  0xFC)  &  (~(Data<<2) ); //~ : 틸트( ~1010 -->0101 )
 124:	90 91 62 00 	lds	r25, 0x0062
 128:	e2 2f       	mov	r30, r18
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	80 81       	ld	r24, Z
 132:	88 0f       	add	r24, r24
 134:	88 0f       	add	r24, r24
 136:	80 95       	com	r24
 138:	9c 6f       	ori	r25, 0xFC	; 252
 13a:	89 23       	and	r24, r25
 13c:	80 93 62 00 	sts	0x0062, r24
}                                                                          //비트 반전(~)시켜라.
void  Delay(unsigned  long  Delay)
{       volatile  unsigned  long  i;                             // volatile --> 최적화시키지 말라는 뜻.
        for(i=0; i<Delay; i++);                                   //결국 : 시간 지연하는 것. = MCU=CPU = clock다룬다.
 140:	19 82       	std	Y+1, r1	; 0x01
 142:	1a 82       	std	Y+2, r1	; 0x02
 144:	1b 82       	std	Y+3, r1	; 0x03
 146:	1c 82       	std	Y+4, r1	; 0x04
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	9a 81       	ldd	r25, Y+2	; 0x02
 14c:	ab 81       	ldd	r26, Y+3	; 0x03
 14e:	bc 81       	ldd	r27, Y+4	; 0x04
 150:	80 5a       	subi	r24, 0xA0	; 160
 152:	96 48       	sbci	r25, 0x86	; 134
 154:	a1 40       	sbci	r26, 0x01	; 1
 156:	b0 40       	sbci	r27, 0x00	; 0
 158:	a0 f4       	brcc	.+40     	; 0x182 <main+0xc4>
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	ab 81       	ldd	r26, Y+3	; 0x03
 160:	bc 81       	ldd	r27, Y+4	; 0x04
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	a1 1d       	adc	r26, r1
 166:	b1 1d       	adc	r27, r1
 168:	89 83       	std	Y+1, r24	; 0x01
 16a:	9a 83       	std	Y+2, r25	; 0x02
 16c:	ab 83       	std	Y+3, r26	; 0x03
 16e:	bc 83       	std	Y+4, r27	; 0x04
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	ab 81       	ldd	r26, Y+3	; 0x03
 176:	bc 81       	ldd	r27, Y+4	; 0x04
 178:	80 5a       	subi	r24, 0xA0	; 160
 17a:	96 48       	sbci	r25, 0x86	; 134
 17c:	a1 40       	sbci	r26, 0x01	; 1
 17e:	b0 40       	sbci	r27, 0x00	; 0
 180:	60 f3       	brcs	.-40     	; 0x15a <main+0x9c>
       unsigned  char  i;
       LED_Init();
       LED_OnOff(0x2A);
       Delay(100000);
       while(1){
	for(i=0; i<18; i++){
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	22 31       	cpi	r18, 0x12	; 18
 186:	68 f6       	brcc	.-102    	; 0x122 <main+0x64>
 188:	cd cf       	rjmp	.-102    	; 0x124 <main+0x66>

0000018a <LED_Init>:
              }
      }
      return   0;
}
void  LED_Init(void)
{       DDRF   =  0xFC;    // 1111  1100
 18a:	8c ef       	ldi	r24, 0xFC	; 252
 18c:	80 93 61 00 	sts	0x0061, r24
        PORTF  =  0xFC;   // 1111  1100
 190:	80 93 62 00 	sts	0x0062, r24
}
 194:	08 95       	ret

00000196 <LED_OnOff>:
void  LED_OnOff(unsigned  char  Data)
{
        PORTF  =  (PORTF  |  0xFC)  &  (~(Data<<2) ); //~ : 틸트( ~1010 -->0101 )
 196:	e2 e6       	ldi	r30, 0x62	; 98
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	90 81       	ld	r25, Z
 19c:	88 0f       	add	r24, r24
 19e:	88 0f       	add	r24, r24
 1a0:	80 95       	com	r24
 1a2:	9c 6f       	ori	r25, 0xFC	; 252
 1a4:	98 23       	and	r25, r24
 1a6:	90 83       	st	Z, r25
}                                                                          //비트 반전(~)시켜라.
 1a8:	08 95       	ret

000001aa <Delay>:
void  Delay(unsigned  long  Delay)
{       volatile  unsigned  long  i;                             // volatile --> 최적화시키지 말라는 뜻.
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <Delay+0x6>
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <Delay+0x8>
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	9b 01       	movw	r18, r22
 1b8:	ac 01       	movw	r20, r24
        for(i=0; i<Delay; i++);                                   //결국 : 시간 지연하는 것. = MCU=CPU = clock다룬다.
 1ba:	19 82       	std	Y+1, r1	; 0x01
 1bc:	1a 82       	std	Y+2, r1	; 0x02
 1be:	1b 82       	std	Y+3, r1	; 0x03
 1c0:	1c 82       	std	Y+4, r1	; 0x04
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	ab 81       	ldd	r26, Y+3	; 0x03
 1c8:	bc 81       	ldd	r27, Y+4	; 0x04
 1ca:	82 17       	cp	r24, r18
 1cc:	93 07       	cpc	r25, r19
 1ce:	a4 07       	cpc	r26, r20
 1d0:	b5 07       	cpc	r27, r21
 1d2:	a0 f4       	brcc	.+40     	; 0x1fc <Delay+0x52>
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	9a 81       	ldd	r25, Y+2	; 0x02
 1d8:	ab 81       	ldd	r26, Y+3	; 0x03
 1da:	bc 81       	ldd	r27, Y+4	; 0x04
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	a1 1d       	adc	r26, r1
 1e0:	b1 1d       	adc	r27, r1
 1e2:	89 83       	std	Y+1, r24	; 0x01
 1e4:	9a 83       	std	Y+2, r25	; 0x02
 1e6:	ab 83       	std	Y+3, r26	; 0x03
 1e8:	bc 83       	std	Y+4, r27	; 0x04
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	9a 81       	ldd	r25, Y+2	; 0x02
 1ee:	ab 81       	ldd	r26, Y+3	; 0x03
 1f0:	bc 81       	ldd	r27, Y+4	; 0x04
 1f2:	82 17       	cp	r24, r18
 1f4:	93 07       	cpc	r25, r19
 1f6:	a4 07       	cpc	r26, r20
 1f8:	b5 07       	cpc	r27, r21
 1fa:	60 f3       	brcs	.-40     	; 0x1d4 <Delay+0x2a>
}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	cf 91       	pop	r28
 206:	df 91       	pop	r29
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
