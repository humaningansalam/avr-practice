
AVR0604_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000476  0000050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800116  00800116  00000520  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000020c  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056a  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000303  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059a  00000000  00000000  00001019  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000211  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015b  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_12>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 31       	cpi	r26, 0x1B	; 27
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 14 01 	call	0x228	; 0x228 <main>
  c6:	0c 94 39 02 	jmp	0x472	; 0x472 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <UART_Control>:
	if(AM % 2 == 0) FND_Write(Time/3600, 2, 0); //시간 : 1의자리_짝수
	else FND_Write(Time/3600, 2, 1); //시간 : 1의자리_짝수

	FND_Write(Time/36000 % 10, 2, 1); //분 : 10의 자리
}
void UART_Control(void){
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	0f 92       	push	r0
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62

	uint8_t Data;
	if(UART_GetChar(&Data) == 0) return;
  d8:	ce 01       	movw	r24, r28
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	0e 94 19 02 	call	0x432	; 0x432 <UART_GetChar>
  e0:	89 2b       	or	r24, r25
  e2:	21 f4       	brne	.+8      	; 0xec <UART_Control+0x1e>
		case '2' : TIMER_Stop(); break;
		case '3' : TIMER_Reset(); break;
		case '4' : TIMER_Start2(); break;
		default : break;
	}
}
  e4:	0f 90       	pop	r0
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret
}
void UART_Control(void){

	uint8_t Data;
	if(UART_GetChar(&Data) == 0) return;
	UART_PutChar(Data);
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <UART_PutChar>
	switch(Data){
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	82 33       	cpi	r24, 0x32	; 50
  f8:	71 f0       	breq	.+28     	; 0x116 <UART_Control+0x48>
  fa:	83 33       	cpi	r24, 0x33	; 51
  fc:	38 f0       	brcs	.+14     	; 0x10c <UART_Control+0x3e>
  fe:	83 33       	cpi	r24, 0x33	; 51
 100:	69 f0       	breq	.+26     	; 0x11c <UART_Control+0x4e>
 102:	84 33       	cpi	r24, 0x34	; 52
 104:	79 f7       	brne	.-34     	; 0xe4 <UART_Control+0x16>
		case'1' : TIMER_Start1(); break;
		case '2' : TIMER_Stop(); break;
		case '3' : TIMER_Reset(); break;
		case '4' : TIMER_Start2(); break;
 106:	0e 94 cd 01 	call	0x39a	; 0x39a <TIMER_Start2>
 10a:	ec cf       	rjmp	.-40     	; 0xe4 <UART_Control+0x16>
void UART_Control(void){

	uint8_t Data;
	if(UART_GetChar(&Data) == 0) return;
	UART_PutChar(Data);
	switch(Data){
 10c:	81 33       	cpi	r24, 0x31	; 49
 10e:	51 f7       	brne	.-44     	; 0xe4 <UART_Control+0x16>
		case'1' : TIMER_Start1(); break;
 110:	0e 94 c9 01 	call	0x392	; 0x392 <TIMER_Start1>
 114:	e7 cf       	rjmp	.-50     	; 0xe4 <UART_Control+0x16>
		case '2' : TIMER_Stop(); break;
 116:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TIMER_Stop>
 11a:	e4 cf       	rjmp	.-56     	; 0xe4 <UART_Control+0x16>
		case '3' : TIMER_Reset(); break;
 11c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <TIMER_Reset>
 120:	e1 cf       	rjmp	.-62     	; 0xe4 <UART_Control+0x16>

00000122 <Stop_Watch_Display>:
	UART_Init();
}



void Stop_Watch_Display(void){
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17

	uint16_t Time;
	uint8_t AM;
	Time = TIMER_GetTime1();
 128:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TIMER_GetTime1>
 12c:	18 2f       	mov	r17, r24
 12e:	09 2f       	mov	r16, r25
	AM = TIMER_GetTime2();
 130:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <TIMER_GetTime2>
 134:	f8 2e       	mov	r15, r24
	if((Time %10) % 2 == 0) FND_Write(Time/60 % 10, 0, 0); //분 :1의자리_짝수
 136:	81 2f       	mov	r24, r17
 138:	90 2f       	mov	r25, r16
 13a:	6a e0       	ldi	r22, 0x0A	; 10
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 142:	80 fd       	sbrc	r24, 0
 144:	4a c0       	rjmp	.+148    	; 0x1da <Stop_Watch_Display+0xb8>
 146:	81 2f       	mov	r24, r17
 148:	90 2f       	mov	r25, r16
 14a:	6c e3       	ldi	r22, 0x3C	; 60
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 152:	cb 01       	movw	r24, r22
 154:	6a e0       	ldi	r22, 0x0A	; 10
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	0e 94 74 01 	call	0x2e8	; 0x2e8 <FND_Write>
	else  FND_Write(Time/60 % 10, 0, 1); //분 :1의자리_홀수
	FND_Write(Time/600 % 06, 1, 0); //분 : 10의 자리
 168:	81 2f       	mov	r24, r17
 16a:	90 2f       	mov	r25, r16
 16c:	68 e5       	ldi	r22, 0x58	; 88
 16e:	72 e0       	ldi	r23, 0x02	; 2
 170:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 174:	cb 01       	movw	r24, r22
 176:	66 e0       	ldi	r22, 0x06	; 6
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	0e 94 74 01 	call	0x2e8	; 0x2e8 <FND_Write>
	
	if(AM % 2 == 0) FND_Write(Time/3600, 2, 0); //시간 : 1의자리_짝수
 18a:	f0 fe       	sbrs	r15, 0
 18c:	38 c0       	rjmp	.+112    	; 0x1fe <Stop_Watch_Display+0xdc>
	else FND_Write(Time/3600, 2, 1); //시간 : 1의자리_짝수
 18e:	81 2f       	mov	r24, r17
 190:	90 2f       	mov	r25, r16
 192:	60 e1       	ldi	r22, 0x10	; 16
 194:	7e e0       	ldi	r23, 0x0E	; 14
 196:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 19a:	cb 01       	movw	r24, r22
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <FND_Write>

	FND_Write(Time/36000 % 10, 2, 1); //분 : 10의 자리
 1a8:	81 2f       	mov	r24, r17
 1aa:	90 2f       	mov	r25, r16
 1ac:	60 ea       	ldi	r22, 0xA0	; 160
 1ae:	7c e8       	ldi	r23, 0x8C	; 140
 1b0:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 1b4:	cb 01       	movw	r24, r22
 1b6:	6a e0       	ldi	r22, 0x0A	; 10
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 1be:	a0 e0       	ldi	r26, 0x00	; 0
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	bc 01       	movw	r22, r24
 1c4:	cd 01       	movw	r24, r26
 1c6:	42 e0       	ldi	r20, 0x02	; 2
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	0e 94 74 01 	call	0x2e8	; 0x2e8 <FND_Write>
}
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	08 95       	ret
	uint16_t Time;
	uint8_t AM;
	Time = TIMER_GetTime1();
	AM = TIMER_GetTime2();
	if((Time %10) % 2 == 0) FND_Write(Time/60 % 10, 0, 0); //분 :1의자리_짝수
	else  FND_Write(Time/60 % 10, 0, 1); //분 :1의자리_홀수
 1da:	81 2f       	mov	r24, r17
 1dc:	90 2f       	mov	r25, r16
 1de:	6c e3       	ldi	r22, 0x3C	; 60
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 1e6:	cb 01       	movw	r24, r22
 1e8:	6a e0       	ldi	r22, 0x0A	; 10
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <FND_Write>
 1fc:	b5 cf       	rjmp	.-150    	; 0x168 <Stop_Watch_Display+0x46>
	FND_Write(Time/600 % 06, 1, 0); //분 : 10의 자리
	
	if(AM % 2 == 0) FND_Write(Time/3600, 2, 0); //시간 : 1의자리_짝수
 1fe:	81 2f       	mov	r24, r17
 200:	90 2f       	mov	r25, r16
 202:	60 e1       	ldi	r22, 0x10	; 16
 204:	7e e0       	ldi	r23, 0x0E	; 14
 206:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 20a:	cb 01       	movw	r24, r22
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	0e 94 74 01 	call	0x2e8	; 0x2e8 <FND_Write>
 218:	c7 cf       	rjmp	.-114    	; 0x1a8 <Stop_Watch_Display+0x86>

0000021a <Init>:
}


void Init(void){

	UART_Init();
 21a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <UART_Init>
	FND_Init();
 21e:	0e 94 1c 01 	call	0x238	; 0x238 <FND_Init>
	UART_Init();
 222:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <UART_Init>
}
 226:	08 95       	ret

00000228 <main>:
void UART_Control(void);


int main(void){

	Init();
 228:	0e 94 0d 01 	call	0x21a	; 0x21a <Init>
	sei();
 22c:	78 94       	sei
	while(1){

		Stop_Watch_Display();
 22e:	0e 94 91 00 	call	0x122	; 0x122 <Stop_Watch_Display>
		UART_Control();
 232:	0e 94 67 00 	call	0xce	; 0xce <UART_Control>
 236:	fb cf       	rjmp	.-10     	; 0x22e <main+0x6>

00000238 <FND_Init>:
const  uint8_t  FND_Dot[2] = {0x80, 0x00};
         uint8_t   FND_Buffer[4] = {0xFF, 0xFF, 0xFF, 0xFF};

void     FND_Init(void)
{
           DDRD     |=   0xFF;
 238:	81 b3       	in	r24, 0x11	; 17
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	81 bb       	out	0x11, r24	; 17
           DDRG     |=   0x1B;
 23e:	e4 e6       	ldi	r30, 0x64	; 100
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	8b 61       	ori	r24, 0x1B	; 27
 246:	80 83       	st	Z, r24
           TCCR2     =   0x0D; //분주비, CTC mode, 내부 타이머, TCNT2(0-255)
 248:	8d e0       	ldi	r24, 0x0D	; 13
 24a:	85 bd       	out	0x25, r24	; 37
           OCR2      =   38;     //TCNT2(0-255)
 24c:	86 e2       	ldi	r24, 0x26	; 38
 24e:	83 bd       	out	0x23, r24	; 35
           TIMSK    |=   (1<<OCIE2);
 250:	87 b7       	in	r24, 0x37	; 55
 252:	80 68       	ori	r24, 0x80	; 128
 254:	87 bf       	out	0x37, r24	; 55
}
 256:	08 95       	ret

00000258 <FND_On>:
void     FND_On(uint8_t Num, uint8_t Digit, uint8_t Dot)
{
           PORTD  =  (FND_Font[Num]  &  0x7F)  |  FND_Dot[Dot];
 258:	ae e0       	ldi	r26, 0x0E	; 14
 25a:	b1 e0       	ldi	r27, 0x01	; 1
 25c:	a4 0f       	add	r26, r20
 25e:	b1 1d       	adc	r27, r1
 260:	e0 e0       	ldi	r30, 0x00	; 0
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	e8 0f       	add	r30, r24
 266:	f1 1d       	adc	r31, r1
 268:	80 81       	ld	r24, Z
 26a:	8f 77       	andi	r24, 0x7F	; 127
 26c:	9c 91       	ld	r25, X
 26e:	89 2b       	or	r24, r25
 270:	82 bb       	out	0x12, r24	; 18
           PORTG  =  (PORTG               &   0xE4)  |  FND_Common[Digit];
 272:	a5 e6       	ldi	r26, 0x65	; 101
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	8c 91       	ld	r24, X
 278:	ea e0       	ldi	r30, 0x0A	; 10
 27a:	f1 e0       	ldi	r31, 0x01	; 1
 27c:	e6 0f       	add	r30, r22
 27e:	f1 1d       	adc	r31, r1
 280:	84 7e       	andi	r24, 0xE4	; 228
 282:	90 81       	ld	r25, Z
 284:	89 2b       	or	r24, r25
 286:	8c 93       	st	X, r24
}
 288:	08 95       	ret

0000028a <__vector_9>:
ISR(TIMER2_COMP_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	0b b6       	in	r0, 0x3b	; 59
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
          static  uint8_t  Digit   =  0;
          Digit++;
          Digit    %=   4;
 2a4:	e0 91 16 01 	lds	r30, 0x0116
 2a8:	ef 5f       	subi	r30, 0xFF	; 255
 2aa:	e3 70       	andi	r30, 0x03	; 3
 2ac:	e0 93 16 01 	sts	0x0116, r30
          PORTD   =   FND_Buffer[Digit];
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	df 01       	movw	r26, r30
 2b4:	a0 5f       	subi	r26, 0xF0	; 240
 2b6:	be 4f       	sbci	r27, 0xFE	; 254
 2b8:	8c 91       	ld	r24, X
 2ba:	82 bb       	out	0x12, r24	; 18
          PORTG   =   (PORTG  &   0xE4)  |  FND_Common[Digit];
 2bc:	a5 e6       	ldi	r26, 0x65	; 101
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	8c 91       	ld	r24, X
 2c2:	e6 5f       	subi	r30, 0xF6	; 246
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
 2c6:	84 7e       	andi	r24, 0xE4	; 228
 2c8:	90 81       	ld	r25, Z
 2ca:	89 2b       	or	r24, r25
 2cc:	8c 93       	st	X, r24
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	0f 90       	pop	r0
 2dc:	0b be       	out	0x3b, r0	; 59
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <FND_Write>:
void     FND_Write(uint8_t Num, uint8_t Digit, uint8_t Dot)
{
           if(Dot)  FND_Buffer[Digit]  =  FND_Font[Num]  &  0x7F;
 2e8:	44 23       	and	r20, r20
 2ea:	59 f4       	brne	.+22     	; 0x302 <FND_Write+0x1a>
           else      FND_Buffer[Digit]  =  FND_Font[Num];
 2ec:	e6 2f       	mov	r30, r22
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	e0 5f       	subi	r30, 0xF0	; 240
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	a8 2f       	mov	r26, r24
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	a0 50       	subi	r26, 0x00	; 0
 2fa:	bf 4f       	sbci	r27, 0xFF	; 255
 2fc:	8c 91       	ld	r24, X
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret
          PORTD   =   FND_Buffer[Digit];
          PORTG   =   (PORTG  &   0xE4)  |  FND_Common[Digit];
}
void     FND_Write(uint8_t Num, uint8_t Digit, uint8_t Dot)
{
           if(Dot)  FND_Buffer[Digit]  =  FND_Font[Num]  &  0x7F;
 302:	e6 2f       	mov	r30, r22
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	e0 5f       	subi	r30, 0xF0	; 240
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	a8 2f       	mov	r26, r24
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	a0 50       	subi	r26, 0x00	; 0
 310:	bf 4f       	sbci	r27, 0xFF	; 255
 312:	8c 91       	ld	r24, X
 314:	8f 77       	andi	r24, 0x7F	; 127
 316:	80 83       	st	Z, r24
 318:	08 95       	ret

0000031a <TIMER_Init>:
uint8_t TIMER_Flag = 1;
uint8_t AM = 1;

void TIMER_Init(void){

	TCCR1A = 0x00;
 31a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x0C;
 31c:	8c e0       	ldi	r24, 0x0C	; 12
 31e:	8e bd       	out	0x2e, r24	; 46
	OCR1AH = 0x7A;
 320:	8a e7       	ldi	r24, 0x7A	; 122
 322:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0x12;
 324:	82 e1       	ldi	r24, 0x12	; 18
 326:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1<<OCIE1A);
 328:	87 b7       	in	r24, 0x37	; 55
 32a:	80 61       	ori	r24, 0x10	; 16
 32c:	87 bf       	out	0x37, r24	; 55

}
 32e:	08 95       	ret

00000330 <__vector_12>:

ISR(TIMER1_COMPA_vect){
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25

	if(TIMER_Flag){
 340:	80 91 14 01 	lds	r24, 0x0114
 344:	88 23       	and	r24, r24
 346:	61 f0       	breq	.+24     	; 0x360 <__vector_12+0x30>
		TIMER_1000ms++;
 348:	80 91 17 01 	lds	r24, 0x0117
 34c:	90 91 18 01 	lds	r25, 0x0118
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	90 93 18 01 	sts	0x0118, r25
 356:	80 93 17 01 	sts	0x0117, r24
		if(TIMER_1000ms==43200){
 35a:	80 5c       	subi	r24, 0xC0	; 192
 35c:	98 4a       	sbci	r25, 0xA8	; 168
 35e:	41 f0       	breq	.+16     	; 0x370 <__vector_12+0x40>
			TIMER_1000ms = 0;
			AM++;
		}
	}
}
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti
ISR(TIMER1_COMPA_vect){

	if(TIMER_Flag){
		TIMER_1000ms++;
		if(TIMER_1000ms==43200){
			TIMER_1000ms = 0;
 370:	10 92 18 01 	sts	0x0118, r1
 374:	10 92 17 01 	sts	0x0117, r1
			AM++;
 378:	80 91 15 01 	lds	r24, 0x0115
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	80 93 15 01 	sts	0x0115, r24
		}
	}
}
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <TIMER_Start1>:

void TIMER_Start1(void){

	TIMER_Flag = 1;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 14 01 	sts	0x0114, r24

}
 398:	08 95       	ret

0000039a <TIMER_Start2>:
void TIMER_Start2(void){

	TIMER_Flag = 1;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 93 14 01 	sts	0x0114, r24
	TIMER_1000ms = 42950;
 3a0:	86 ec       	ldi	r24, 0xC6	; 198
 3a2:	97 ea       	ldi	r25, 0xA7	; 167
 3a4:	90 93 18 01 	sts	0x0118, r25
 3a8:	80 93 17 01 	sts	0x0117, r24

}
 3ac:	08 95       	ret

000003ae <TIMER_Stop>:
void TIMER_Stop(void){

	TIMER_Flag = 0;
 3ae:	10 92 14 01 	sts	0x0114, r1

}
 3b2:	08 95       	ret

000003b4 <TIMER_Reset>:
void TIMER_Reset(void){

	TIMER_Flag = 0;
 3b4:	10 92 14 01 	sts	0x0114, r1
	TIMER_1000ms = 0;
 3b8:	10 92 18 01 	sts	0x0118, r1
 3bc:	10 92 17 01 	sts	0x0117, r1
	AM = 1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 15 01 	sts	0x0115, r24

}
 3c6:	08 95       	ret

000003c8 <TIMER_GetTime1>:
uint16_t TIMER_GetTime1(void){

	return TIMER_1000ms;
}
 3c8:	80 91 17 01 	lds	r24, 0x0117
 3cc:	90 91 18 01 	lds	r25, 0x0118
 3d0:	08 95       	ret

000003d2 <TIMER_GetTime2>:
uint8_t TIMER_GetTime2(void){

	return AM;
}
 3d2:	80 91 15 01 	lds	r24, 0x0115
 3d6:	08 95       	ret

000003d8 <UART_Init>:
uint8_t          UART_Buffer;
uint8_t          UART_Flag     =  0;

void     UART_Init(void)
{
           UCSR0A  =  0x00;
 3d8:	1b b8       	out	0x0b, r1	; 11
           UCSR0B  =  0x98;  
 3da:	88 e9       	ldi	r24, 0x98	; 152
 3dc:	8a b9       	out	0x0a, r24	; 10
           UCSR0C  =  0x06;   
 3de:	86 e0       	ldi	r24, 0x06	; 6
 3e0:	80 93 95 00 	sts	0x0095, r24
           UBRR0H  =  0;
 3e4:	10 92 90 00 	sts	0x0090, r1
           UBRR0L  =   12;     //38400bps, 8MHz    
 3e8:	8c e0       	ldi	r24, 0x0C	; 12
 3ea:	89 b9       	out	0x09, r24	; 9
}
 3ec:	08 95       	ret

000003ee <UART_PutChar>:
void     UART_PutChar(uint8_t  Data)
{
           while( (UCSR0A & 0x20) == 0 ); // 0010 0000
 3ee:	5d 9b       	sbis	0x0b, 5	; 11
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <UART_PutChar>
           UDR0  =  Data;
 3f2:	8c b9       	out	0x0c, r24	; 12
}
 3f4:	08 95       	ret

000003f6 <UART_PutString>:
void     UART_PutString(const char *String)
{
 3f6:	fc 01       	movw	r30, r24
           while(*String){
 3f8:	80 81       	ld	r24, Z
 3fa:	88 23       	and	r24, r24
 3fc:	39 f0       	breq	.+14     	; 0x40c <UART_PutString+0x16>
           UBRR0H  =  0;
           UBRR0L  =   12;     //38400bps, 8MHz    
}
void     UART_PutChar(uint8_t  Data)
{
           while( (UCSR0A & 0x20) == 0 ); // 0010 0000
 3fe:	5d 9b       	sbis	0x0b, 5	; 11
 400:	fe cf       	rjmp	.-4      	; 0x3fe <UART_PutString+0x8>
           UDR0  =  Data;
 402:	8c b9       	out	0x0c, r24	; 12
}
void     UART_PutString(const char *String)
{
           while(*String){
                 UART_PutChar(*String);
                 String++;
 404:	31 96       	adiw	r30, 0x01	; 1
           while( (UCSR0A & 0x20) == 0 ); // 0010 0000
           UDR0  =  Data;
}
void     UART_PutString(const char *String)
{
           while(*String){
 406:	80 81       	ld	r24, Z
 408:	88 23       	and	r24, r24
 40a:	c9 f7       	brne	.-14     	; 0x3fe <UART_PutString+0x8>
 40c:	08 95       	ret

0000040e <__vector_18>:
                 UART_PutChar(*String);
                 String++;
           }
}
ISR(USART0_RX_vect)
{
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	8f 93       	push	r24
          UART_Buffer  =  UDR0;
 41a:	8c b1       	in	r24, 0x0c	; 12
 41c:	80 93 1a 01 	sts	0x011A, r24
          UART_Flag     =  1;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	80 93 19 01 	sts	0x0119, r24
}
 426:	8f 91       	pop	r24
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <UART_GetChar>:
uint8_t  UART_GetChar(uint8_t  *Data)
{
 432:	fc 01       	movw	r30, r24
         if(UART_Flag){
 434:	80 91 19 01 	lds	r24, 0x0119
 438:	88 23       	and	r24, r24
 43a:	31 f0       	breq	.+12     	; 0x448 <UART_GetChar+0x16>
            *Data          =   UART_Buffer;
 43c:	80 91 1a 01 	lds	r24, 0x011A
 440:	80 83       	st	Z, r24
            UART_Flag   =   0;
 442:	10 92 19 01 	sts	0x0119, r1
 446:	81 e0       	ldi	r24, 0x01	; 1
            return  1;
         }else{
            return  0;        
         }
}
 448:	08 95       	ret

0000044a <__udivmodhi4>:
 44a:	aa 1b       	sub	r26, r26
 44c:	bb 1b       	sub	r27, r27
 44e:	51 e1       	ldi	r21, 0x11	; 17
 450:	07 c0       	rjmp	.+14     	; 0x460 <__udivmodhi4_ep>

00000452 <__udivmodhi4_loop>:
 452:	aa 1f       	adc	r26, r26
 454:	bb 1f       	adc	r27, r27
 456:	a6 17       	cp	r26, r22
 458:	b7 07       	cpc	r27, r23
 45a:	10 f0       	brcs	.+4      	; 0x460 <__udivmodhi4_ep>
 45c:	a6 1b       	sub	r26, r22
 45e:	b7 0b       	sbc	r27, r23

00000460 <__udivmodhi4_ep>:
 460:	88 1f       	adc	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	5a 95       	dec	r21
 466:	a9 f7       	brne	.-22     	; 0x452 <__udivmodhi4_loop>
 468:	80 95       	com	r24
 46a:	90 95       	com	r25
 46c:	bc 01       	movw	r22, r24
 46e:	cd 01       	movw	r24, r26
 470:	08 95       	ret

00000472 <_exit>:
 472:	f8 94       	cli

00000474 <__stop_program>:
 474:	ff cf       	rjmp	.-2      	; 0x474 <__stop_program>
