
AVR0423_FND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000290  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000032  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001ec  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f3  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000129  00000000  00000000  00000615  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008e  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000034  00000000  00000000  0000080e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 91 00 	call	0x122	; 0x122 <main>
  b6:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <FND_Init>:
#include <avr/io.h>

void FND_Init(void)
{
	DDRG = 0b00011011;  //0x1B <== FND 자리수 결정(출력용 방향)
  be:	8b e1       	ldi	r24, 0x1B	; 27
  c0:	80 93 64 00 	sts	0x0064, r24
	DDRD = 0b11111111;  //0xFF <== FND 값 결정(출력용 방향)
  c4:	9f ef       	ldi	r25, 0xFF	; 255
  c6:	91 bb       	out	0x11, r25	; 17
	PORTG = 0b11100100; //0xE4 <== 초기값 제공
  c8:	84 ee       	ldi	r24, 0xE4	; 228
  ca:	80 93 65 00 	sts	0x0065, r24
	PORTD = 0b11111111; //0xFF <== 초기값 제공
  ce:	92 bb       	out	0x12, r25	; 18

}
  d0:	08 95       	ret

000000d2 <Delay>:

void Delay(unsigned long Delay)
{
  d2:	df 93       	push	r29
  d4:	cf 93       	push	r28
  d6:	00 d0       	rcall	.+0      	; 0xd8 <Delay+0x6>
  d8:	00 d0       	rcall	.+0      	; 0xda <Delay+0x8>
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	9b 01       	movw	r18, r22
  e0:	ac 01       	movw	r20, r24
  volatile unsigned long i;
  for(i=0; i<Delay; i++);
  e2:	19 82       	std	Y+1, r1	; 0x01
  e4:	1a 82       	std	Y+2, r1	; 0x02
  e6:	1b 82       	std	Y+3, r1	; 0x03
  e8:	1c 82       	std	Y+4, r1	; 0x04
  ea:	0b c0       	rjmp	.+22     	; 0x102 <Delay+0x30>
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	ab 81       	ldd	r26, Y+3	; 0x03
  f2:	bc 81       	ldd	r27, Y+4	; 0x04
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	a1 1d       	adc	r26, r1
  f8:	b1 1d       	adc	r27, r1
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	9a 83       	std	Y+2, r25	; 0x02
  fe:	ab 83       	std	Y+3, r26	; 0x03
 100:	bc 83       	std	Y+4, r27	; 0x04
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	9a 81       	ldd	r25, Y+2	; 0x02
 106:	ab 81       	ldd	r26, Y+3	; 0x03
 108:	bc 81       	ldd	r27, Y+4	; 0x04
 10a:	82 17       	cp	r24, r18
 10c:	93 07       	cpc	r25, r19
 10e:	a4 07       	cpc	r26, r20
 110:	b5 07       	cpc	r27, r21
 112:	60 f3       	brcs	.-40     	; 0xec <Delay+0x1a>
}
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <main>:

int main(void)
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	00 d0       	rcall	.+0      	; 0x128 <main+0x6>
 128:	00 d0       	rcall	.+0      	; 0x12a <main+0x8>
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
#include <avr/io.h>

void FND_Init(void)
{
	DDRG = 0b00011011;  //0x1B <== FND 자리수 결정(출력용 방향)
 12e:	8b e1       	ldi	r24, 0x1B	; 27
 130:	80 93 64 00 	sts	0x0064, r24
	DDRD = 0b11111111;  //0xFF <== FND 값 결정(출력용 방향)
 134:	9f ef       	ldi	r25, 0xFF	; 255
 136:	91 bb       	out	0x11, r25	; 17
	PORTG = 0b11100100; //0xE4 <== 초기값 제공
 138:	84 ee       	ldi	r24, 0xE4	; 228
 13a:	80 93 65 00 	sts	0x0065, r24
	PORTD = 0b11111111; //0xFF <== 초기값 제공
 13e:	92 bb       	out	0x12, r25	; 18
}

int main(void)
{
	FND_Init();
	PORTG = 0x10; //1의 자리만 선택 :출력은 1의 자리만 출력됨
 140:	80 e1       	ldi	r24, 0x10	; 16
 142:	80 93 65 00 	sts	0x0065, r24
	PORTD = 0xC0; Delay(100000);
 146:	80 ec       	ldi	r24, 0xC0	; 192
 148:	82 bb       	out	0x12, r24	; 18
}

void Delay(unsigned long Delay)
{
  volatile unsigned long i;
  for(i=0; i<Delay; i++);
 14a:	19 82       	std	Y+1, r1	; 0x01
 14c:	1a 82       	std	Y+2, r1	; 0x02
 14e:	1b 82       	std	Y+3, r1	; 0x03
 150:	1c 82       	std	Y+4, r1	; 0x04
 152:	0b c0       	rjmp	.+22     	; 0x16a <main+0x48>
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	ab 81       	ldd	r26, Y+3	; 0x03
 15a:	bc 81       	ldd	r27, Y+4	; 0x04
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	a1 1d       	adc	r26, r1
 160:	b1 1d       	adc	r27, r1
 162:	89 83       	std	Y+1, r24	; 0x01
 164:	9a 83       	std	Y+2, r25	; 0x02
 166:	ab 83       	std	Y+3, r26	; 0x03
 168:	bc 83       	std	Y+4, r27	; 0x04
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	9a 81       	ldd	r25, Y+2	; 0x02
 16e:	ab 81       	ldd	r26, Y+3	; 0x03
 170:	bc 81       	ldd	r27, Y+4	; 0x04
 172:	80 5a       	subi	r24, 0xA0	; 160
 174:	96 48       	sbci	r25, 0x86	; 134
 176:	a1 40       	sbci	r26, 0x01	; 1
 178:	b0 40       	sbci	r27, 0x00	; 0
 17a:	60 f3       	brcs	.-40     	; 0x154 <main+0x32>
int main(void)
{
	FND_Init();
	PORTG = 0x10; //1의 자리만 선택 :출력은 1의 자리만 출력됨
	PORTD = 0xC0; Delay(100000);
	PORTD = 0xF9; Delay(100000);
 17c:	89 ef       	ldi	r24, 0xF9	; 249
 17e:	82 bb       	out	0x12, r24	; 18
}

void Delay(unsigned long Delay)
{
  volatile unsigned long i;
  for(i=0; i<Delay; i++);
 180:	19 82       	std	Y+1, r1	; 0x01
 182:	1a 82       	std	Y+2, r1	; 0x02
 184:	1b 82       	std	Y+3, r1	; 0x03
 186:	1c 82       	std	Y+4, r1	; 0x04
 188:	0b c0       	rjmp	.+22     	; 0x1a0 <main+0x7e>
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	ab 81       	ldd	r26, Y+3	; 0x03
 190:	bc 81       	ldd	r27, Y+4	; 0x04
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	a1 1d       	adc	r26, r1
 196:	b1 1d       	adc	r27, r1
 198:	89 83       	std	Y+1, r24	; 0x01
 19a:	9a 83       	std	Y+2, r25	; 0x02
 19c:	ab 83       	std	Y+3, r26	; 0x03
 19e:	bc 83       	std	Y+4, r27	; 0x04
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	9a 81       	ldd	r25, Y+2	; 0x02
 1a4:	ab 81       	ldd	r26, Y+3	; 0x03
 1a6:	bc 81       	ldd	r27, Y+4	; 0x04
 1a8:	80 5a       	subi	r24, 0xA0	; 160
 1aa:	96 48       	sbci	r25, 0x86	; 134
 1ac:	a1 40       	sbci	r26, 0x01	; 1
 1ae:	b0 40       	sbci	r27, 0x00	; 0
 1b0:	60 f3       	brcs	.-40     	; 0x18a <main+0x68>
{
	FND_Init();
	PORTG = 0x10; //1의 자리만 선택 :출력은 1의 자리만 출력됨
	PORTD = 0xC0; Delay(100000);
	PORTD = 0xF9; Delay(100000);
	PORTD = 0xA4; Delay(100000);
 1b2:	84 ea       	ldi	r24, 0xA4	; 164
 1b4:	82 bb       	out	0x12, r24	; 18
}

void Delay(unsigned long Delay)
{
  volatile unsigned long i;
  for(i=0; i<Delay; i++);
 1b6:	19 82       	std	Y+1, r1	; 0x01
 1b8:	1a 82       	std	Y+2, r1	; 0x02
 1ba:	1b 82       	std	Y+3, r1	; 0x03
 1bc:	1c 82       	std	Y+4, r1	; 0x04
 1be:	0b c0       	rjmp	.+22     	; 0x1d6 <main+0xb4>
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	9a 81       	ldd	r25, Y+2	; 0x02
 1c4:	ab 81       	ldd	r26, Y+3	; 0x03
 1c6:	bc 81       	ldd	r27, Y+4	; 0x04
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	a1 1d       	adc	r26, r1
 1cc:	b1 1d       	adc	r27, r1
 1ce:	89 83       	std	Y+1, r24	; 0x01
 1d0:	9a 83       	std	Y+2, r25	; 0x02
 1d2:	ab 83       	std	Y+3, r26	; 0x03
 1d4:	bc 83       	std	Y+4, r27	; 0x04
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	ab 81       	ldd	r26, Y+3	; 0x03
 1dc:	bc 81       	ldd	r27, Y+4	; 0x04
 1de:	80 5a       	subi	r24, 0xA0	; 160
 1e0:	96 48       	sbci	r25, 0x86	; 134
 1e2:	a1 40       	sbci	r26, 0x01	; 1
 1e4:	b0 40       	sbci	r27, 0x00	; 0
 1e6:	60 f3       	brcs	.-40     	; 0x1c0 <main+0x9e>
	FND_Init();
	PORTG = 0x10; //1의 자리만 선택 :출력은 1의 자리만 출력됨
	PORTD = 0xC0; Delay(100000);
	PORTD = 0xF9; Delay(100000);
	PORTD = 0xA4; Delay(100000);
	PORTD = 0xB0; Delay(100000);
 1e8:	80 eb       	ldi	r24, 0xB0	; 176
 1ea:	82 bb       	out	0x12, r24	; 18
}

void Delay(unsigned long Delay)
{
  volatile unsigned long i;
  for(i=0; i<Delay; i++);
 1ec:	19 82       	std	Y+1, r1	; 0x01
 1ee:	1a 82       	std	Y+2, r1	; 0x02
 1f0:	1b 82       	std	Y+3, r1	; 0x03
 1f2:	1c 82       	std	Y+4, r1	; 0x04
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <main+0xea>
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	ab 81       	ldd	r26, Y+3	; 0x03
 1fc:	bc 81       	ldd	r27, Y+4	; 0x04
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	a1 1d       	adc	r26, r1
 202:	b1 1d       	adc	r27, r1
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	ab 83       	std	Y+3, r26	; 0x03
 20a:	bc 83       	std	Y+4, r27	; 0x04
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	9a 81       	ldd	r25, Y+2	; 0x02
 210:	ab 81       	ldd	r26, Y+3	; 0x03
 212:	bc 81       	ldd	r27, Y+4	; 0x04
 214:	80 5a       	subi	r24, 0xA0	; 160
 216:	96 48       	sbci	r25, 0x86	; 134
 218:	a1 40       	sbci	r26, 0x01	; 1
 21a:	b0 40       	sbci	r27, 0x00	; 0
 21c:	60 f3       	brcs	.-40     	; 0x1f6 <main+0xd4>
	PORTG = 0x10; //1의 자리만 선택 :출력은 1의 자리만 출력됨
	PORTD = 0xC0; Delay(100000);
	PORTD = 0xF9; Delay(100000);
	PORTD = 0xA4; Delay(100000);
	PORTD = 0xB0; Delay(100000);
	PORTD = 0x99; Delay(100000);
 21e:	89 e9       	ldi	r24, 0x99	; 153
 220:	82 bb       	out	0x12, r24	; 18
}

void Delay(unsigned long Delay)
{
  volatile unsigned long i;
  for(i=0; i<Delay; i++);
 222:	19 82       	std	Y+1, r1	; 0x01
 224:	1a 82       	std	Y+2, r1	; 0x02
 226:	1b 82       	std	Y+3, r1	; 0x03
 228:	1c 82       	std	Y+4, r1	; 0x04
 22a:	0b c0       	rjmp	.+22     	; 0x242 <main+0x120>
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	9a 81       	ldd	r25, Y+2	; 0x02
 230:	ab 81       	ldd	r26, Y+3	; 0x03
 232:	bc 81       	ldd	r27, Y+4	; 0x04
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	a1 1d       	adc	r26, r1
 238:	b1 1d       	adc	r27, r1
 23a:	89 83       	std	Y+1, r24	; 0x01
 23c:	9a 83       	std	Y+2, r25	; 0x02
 23e:	ab 83       	std	Y+3, r26	; 0x03
 240:	bc 83       	std	Y+4, r27	; 0x04
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	9a 81       	ldd	r25, Y+2	; 0x02
 246:	ab 81       	ldd	r26, Y+3	; 0x03
 248:	bc 81       	ldd	r27, Y+4	; 0x04
 24a:	80 5a       	subi	r24, 0xA0	; 160
 24c:	96 48       	sbci	r25, 0x86	; 134
 24e:	a1 40       	sbci	r26, 0x01	; 1
 250:	b0 40       	sbci	r27, 0x00	; 0
 252:	60 f3       	brcs	.-40     	; 0x22c <main+0x10a>
	PORTD = 0xC0; Delay(100000);
	PORTD = 0xF9; Delay(100000);
	PORTD = 0xA4; Delay(100000);
	PORTD = 0xB0; Delay(100000);
	PORTD = 0x99; Delay(100000);
	PORTD = 0x92; Delay(100000);
 254:	82 e9       	ldi	r24, 0x92	; 146
 256:	82 bb       	out	0x12, r24	; 18
}

void Delay(unsigned long Delay)
{
  volatile unsigned long i;
  for(i=0; i<Delay; i++);
 258:	19 82       	std	Y+1, r1	; 0x01
 25a:	1a 82       	std	Y+2, r1	; 0x02
 25c:	1b 82       	std	Y+3, r1	; 0x03
 25e:	1c 82       	std	Y+4, r1	; 0x04
 260:	0b c0       	rjmp	.+22     	; 0x278 <main+0x156>
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	9a 81       	ldd	r25, Y+2	; 0x02
 266:	ab 81       	ldd	r26, Y+3	; 0x03
 268:	bc 81       	ldd	r27, Y+4	; 0x04
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	a1 1d       	adc	r26, r1
 26e:	b1 1d       	adc	r27, r1
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	9a 83       	std	Y+2, r25	; 0x02
 274:	ab 83       	std	Y+3, r26	; 0x03
 276:	bc 83       	std	Y+4, r27	; 0x04
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	9a 81       	ldd	r25, Y+2	; 0x02
 27c:	ab 81       	ldd	r26, Y+3	; 0x03
 27e:	bc 81       	ldd	r27, Y+4	; 0x04
 280:	80 5a       	subi	r24, 0xA0	; 160
 282:	96 48       	sbci	r25, 0x86	; 134
 284:	a1 40       	sbci	r26, 0x01	; 1
 286:	b0 40       	sbci	r27, 0x00	; 0
 288:	60 f3       	brcs	.-40     	; 0x262 <main+0x140>
 28a:	ff cf       	rjmp	.-2      	; 0x28a <main+0x168>

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
