
AVR0611_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000388  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000388  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c1  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009bd  00000000  00000000  0000054d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000255  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000584  00000000  00000000  0000115f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  000016e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000164  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000350  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 c2 01 	jmp	0x384	; 0x384 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
00010000
00011110
*/

int    main(void)
{
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
       char   i;
       LCD_HW_Init();
  c6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_HW_Init>
       LCD_SW_Init();
  ca:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_SW_Init>
       LCD_String(0, 0, "Hello World");
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	51 e0       	ldi	r21, 0x01	; 1
  da:	0e 94 98 01 	call	0x330	; 0x330 <LCD_String>
       LCD_String(0, 1, "Hangle Font Display");
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	4c e0       	ldi	r20, 0x0C	; 12
  e8:	51 e0       	ldi	r21, 0x01	; 1
  ea:	0e 94 98 01 	call	0x330	; 0x330 <LCD_String>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ee:	88 ea       	ldi	r24, 0xA8	; 168
  f0:	91 e6       	ldi	r25, 0x61	; 97
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x34>
  f6:	c0 e4       	ldi	r28, 0x40	; 64
  f8:	d0 e0       	ldi	r29, 0x00	; 0
       _delay_ms(100);
       for(i=0; i<48; i++){                                                         // CGRAM address 문법
                LCD_Command(0x40  +  i);
  fa:	ce 01       	movw	r24, r28
  fc:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
                LCD_Data( LCD_Hangle_Font[i] );
 100:	fe 01       	movw	r30, r28
 102:	e0 52       	subi	r30, 0x20	; 32
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	80 81       	ld	r24, Z
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Data>
 10e:	21 96       	adiw	r28, 0x01	; 1
       LCD_HW_Init();
       LCD_SW_Init();
       LCD_String(0, 0, "Hello World");
       LCD_String(0, 1, "Hangle Font Display");
       _delay_ms(100);
       for(i=0; i<48; i++){                                                         // CGRAM address 문법
 110:	c0 37       	cpi	r28, 0x70	; 112
 112:	d1 05       	cpc	r29, r1
 114:	91 f7       	brne	.-28     	; 0xfa <main+0x3c>
 116:	88 ea       	ldi	r24, 0xA8	; 168
 118:	91 e6       	ldi	r25, 0x61	; 97
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x5c>
                LCD_Command(0x40  +  i);
                LCD_Data( LCD_Hangle_Font[i] );
       }
       _delay_ms(100);
       LCD_Command(0x01);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
 126:	84 ed       	ldi	r24, 0xD4	; 212
 128:	90 e3       	ldi	r25, 0x30	; 48
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x6c>
       _delay_ms(50);
       LCD_Char_xy(3,0);  LCD_Data(0x00);         _delay_ms(1);     //DDRAM data 0 
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_Char_xy>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Data>
 142:	0a ef       	ldi	r16, 0xFA	; 250
 144:	10 e0       	ldi	r17, 0x00	; 0
 146:	c8 01       	movw	r24, r16
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0x8a>
       LCD_Char_xy(5,0);  LCD_Data(0x01);         _delay_ms(1);     //DDRAM data 1     
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_Char_xy>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Data>
 160:	c8 01       	movw	r24, r16
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0xa4>
       LCD_Char_xy(7,0);  LCD_Data(0x02);         _delay_ms(1);     //DDRAM data 2  
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_Char_xy>
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Data>
 17a:	c8 01       	movw	r24, r16
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0xbe>
       LCD_Char_xy(3,1);  LCD_Data(0x03);         _delay_ms(1);     //DDRAM data 3     
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_Char_xy>
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Data>
 194:	c8 01       	movw	r24, r16
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0xd8>
       LCD_Char_xy(5,1);  LCD_Data(0x04);         _delay_ms(1);     //DDRAM data 4   
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_Char_xy>
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Data>
 1ae:	c8 01       	movw	r24, r16
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0xf2>
       LCD_Char_xy(7,1);  LCD_Data(0x05);         _delay_ms(1);     //DDRAM data 5     
 1b4:	87 e0       	ldi	r24, 0x07	; 7
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_Char_xy>
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Data>
 1c8:	c8 01       	movw	r24, r16
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x10c>

       return  0;
}
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <LCD_HW_Init>:
#include  <util/delay.h>
#include  <stdint.h>

void      LCD_HW_Init(void)
{                    //RW,RS                            EN                       Data(상위4비트만사용 - 명령, 출력)
            DDRA   =   0xC0;     DDRG   =  0x04;    DDRC   =   0xF0;
 1dc:	80 ec       	ldi	r24, 0xC0	; 192
 1de:	8a bb       	out	0x1a, r24	; 26
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	80 93 64 00 	sts	0x0064, r24
 1e6:	80 ef       	ldi	r24, 0xF0	; 240
 1e8:	84 bb       	out	0x14, r24	; 20
            PORTA  =   0x00;     PORTG =  0x00;    PORTC  =   0x00;            
 1ea:	1b ba       	out	0x1b, r1	; 27
 1ec:	10 92 65 00 	sts	0x0065, r1
 1f0:	15 ba       	out	0x15, r1	; 21
}
 1f2:	08 95       	ret

000001f4 <LCD_Pulse_Enable>:
            _delay_ms(50);
}

void      LCD_Pulse_Enable(void)
{
            PORTG  =  0x04;  _delay_ms(1);
 1f4:	e5 e6       	ldi	r30, 0x65	; 101
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	80 83       	st	Z, r24
 1fc:	8a ef       	ldi	r24, 0xFA	; 250
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	dc 01       	movw	r26, r24
 202:	11 97       	sbiw	r26, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_Pulse_Enable+0xe>
            PORTG  =  0x00;  _delay_ms(1);
 206:	10 82       	st	Z, r1
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_Pulse_Enable+0x14>
}
 20c:	08 95       	ret

0000020e <LCD_Command>:
void      LCD_Command(uint8_t  cmd)
{
            PORTA  =  0x00;    PORTC  =  (cmd          &  0xF0);    LCD_Pulse_Enable();
 20e:	1b ba       	out	0x1b, r1	; 27
 210:	28 2f       	mov	r18, r24
 212:	20 7f       	andi	r18, 0xF0	; 240
 214:	25 bb       	out	0x15, r18	; 21
            _delay_ms(50);
}

void      LCD_Pulse_Enable(void)
{
            PORTG  =  0x04;  _delay_ms(1);
 216:	e5 e6       	ldi	r30, 0x65	; 101
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	44 e0       	ldi	r20, 0x04	; 4
 21c:	40 83       	st	Z, r20
 21e:	2a ef       	ldi	r18, 0xFA	; 250
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	d9 01       	movw	r26, r18
 224:	11 97       	sbiw	r26, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_Command+0x16>
            PORTG  =  0x00;  _delay_ms(1);
 228:	10 82       	st	Z, r1
 22a:	d9 01       	movw	r26, r18
 22c:	11 97       	sbiw	r26, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_Command+0x1e>
}
void      LCD_Command(uint8_t  cmd)
{
            PORTA  =  0x00;    PORTC  =  (cmd          &  0xF0);    LCD_Pulse_Enable();
            PORTA  =  0x00;    PORTC  =  ((cmd<<4)  &  0xF0);    LCD_Pulse_Enable();
 230:	1b ba       	out	0x1b, r1	; 27
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	82 95       	swap	r24
 236:	92 95       	swap	r25
 238:	90 7f       	andi	r25, 0xF0	; 240
 23a:	98 27       	eor	r25, r24
 23c:	80 7f       	andi	r24, 0xF0	; 240
 23e:	98 27       	eor	r25, r24
 240:	85 bb       	out	0x15, r24	; 21
            _delay_ms(50);
}

void      LCD_Pulse_Enable(void)
{
            PORTG  =  0x04;  _delay_ms(1);
 242:	40 83       	st	Z, r20
 244:	c9 01       	movw	r24, r18
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_Command+0x38>
            PORTG  =  0x00;  _delay_ms(1);
 24a:	10 82       	st	Z, r1
 24c:	c9 01       	movw	r24, r18
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_Command+0x40>
void      LCD_Command(uint8_t  cmd)
{
            PORTA  =  0x00;    PORTC  =  (cmd          &  0xF0);    LCD_Pulse_Enable();
            PORTA  =  0x00;    PORTC  =  ((cmd<<4)  &  0xF0);    LCD_Pulse_Enable();
            _delay_ms(5);
}
 252:	82 ee       	ldi	r24, 0xE2	; 226
 254:	94 e0       	ldi	r25, 0x04	; 4
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_Command+0x48>
 25a:	08 95       	ret

0000025c <LCD_SW_Init>:
            DDRA   =   0xC0;     DDRG   =  0x04;    DDRC   =   0xF0;
            PORTA  =   0x00;     PORTG =  0x00;    PORTC  =   0x00;            
}

void      LCD_SW_Init(void)
{
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	64 ed       	ldi	r22, 0xD4	; 212
 266:	e6 2e       	mov	r14, r22
 268:	60 e3       	ldi	r22, 0x30	; 48
 26a:	f6 2e       	mov	r15, r22
 26c:	c7 01       	movw	r24, r14
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_SW_Init+0x12>
            _delay_ms(50);
            LCD_Command(0x20);  _delay_ms(1);
 272:	80 e2       	ldi	r24, 0x20	; 32
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
 27a:	0a ef       	ldi	r16, 0xFA	; 250
 27c:	10 e0       	ldi	r17, 0x00	; 0
 27e:	c8 01       	movw	r24, r16
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_SW_Init+0x24>
            LCD_Command(0x28);  _delay_ms(1);
 284:	88 e2       	ldi	r24, 0x28	; 40
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
 28c:	c8 01       	movw	r24, r16
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_SW_Init+0x32>
            LCD_Command(0x0C);  _delay_ms(1);
 292:	8c e0       	ldi	r24, 0x0C	; 12
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
 29a:	c8 01       	movw	r24, r16
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_SW_Init+0x40>
            LCD_Command(0x06);  _delay_ms(1);
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
 2a8:	c8 01       	movw	r24, r16
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_SW_Init+0x4e>
            LCD_Command(0x01);  _delay_ms(1);
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
 2b6:	c8 01       	movw	r24, r16
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_SW_Init+0x5c>
            _delay_ms(50);
}
 2bc:	c7 01       	movw	r24, r14
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_SW_Init+0x62>
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	08 95       	ret

000002cc <LCD_Data>:
            PORTA  =  0x00;    PORTC  =  ((cmd<<4)  &  0xF0);    LCD_Pulse_Enable();
            _delay_ms(5);
}
void      LCD_Data(char  data)
{
            PORTA  =  0x40;    PORTC  =  (data          &  0xF0);    LCD_Pulse_Enable();
 2cc:	50 e4       	ldi	r21, 0x40	; 64
 2ce:	5b bb       	out	0x1b, r21	; 27
 2d0:	28 2f       	mov	r18, r24
 2d2:	20 7f       	andi	r18, 0xF0	; 240
 2d4:	25 bb       	out	0x15, r18	; 21
            _delay_ms(50);
}

void      LCD_Pulse_Enable(void)
{
            PORTG  =  0x04;  _delay_ms(1);
 2d6:	e5 e6       	ldi	r30, 0x65	; 101
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	44 e0       	ldi	r20, 0x04	; 4
 2dc:	40 83       	st	Z, r20
 2de:	2a ef       	ldi	r18, 0xFA	; 250
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	d9 01       	movw	r26, r18
 2e4:	11 97       	sbiw	r26, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_Data+0x18>
            PORTG  =  0x00;  _delay_ms(1);
 2e8:	10 82       	st	Z, r1
 2ea:	d9 01       	movw	r26, r18
 2ec:	11 97       	sbiw	r26, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_Data+0x20>
            _delay_ms(5);
}
void      LCD_Data(char  data)
{
            PORTA  =  0x40;    PORTC  =  (data          &  0xF0);    LCD_Pulse_Enable();
            PORTA  =  0x40;    PORTC  =  ((data<<4)  &  0xF0);    LCD_Pulse_Enable();
 2f0:	5b bb       	out	0x1b, r21	; 27
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	82 95       	swap	r24
 2f6:	92 95       	swap	r25
 2f8:	90 7f       	andi	r25, 0xF0	; 240
 2fa:	98 27       	eor	r25, r24
 2fc:	80 7f       	andi	r24, 0xF0	; 240
 2fe:	98 27       	eor	r25, r24
 300:	85 bb       	out	0x15, r24	; 21
            _delay_ms(50);
}

void      LCD_Pulse_Enable(void)
{
            PORTG  =  0x04;  _delay_ms(1);
 302:	40 83       	st	Z, r20
 304:	c9 01       	movw	r24, r18
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_Data+0x3a>
            PORTG  =  0x00;  _delay_ms(1);
 30a:	10 82       	st	Z, r1
 30c:	c9 01       	movw	r24, r18
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_Data+0x42>
void      LCD_Data(char  data)
{
            PORTA  =  0x40;    PORTC  =  (data          &  0xF0);    LCD_Pulse_Enable();
            PORTA  =  0x40;    PORTC  =  ((data<<4)  &  0xF0);    LCD_Pulse_Enable();
            _delay_ms(5);
}
 312:	82 ee       	ldi	r24, 0xE2	; 226
 314:	94 e0       	ldi	r25, 0x04	; 4
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <LCD_Data+0x4a>
 31a:	08 95       	ret

0000031c <LCD_Char_xy>:
void      LCD_Char_xy(char   x,  char  y)
{
            uint8_t  pos;
            pos   =   y  ?  ( 0xC0  +  x)   :  (0x80  +  x);
 31c:	66 23       	and	r22, r22
 31e:	21 f4       	brne	.+8      	; 0x328 <LCD_Char_xy+0xc>
 320:	80 58       	subi	r24, 0x80	; 128
            LCD_Command(pos);
 322:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
}
 326:	08 95       	ret
            _delay_ms(5);
}
void      LCD_Char_xy(char   x,  char  y)
{
            uint8_t  pos;
            pos   =   y  ?  ( 0xC0  +  x)   :  (0x80  +  x);
 328:	80 54       	subi	r24, 0x40	; 64
            LCD_Command(pos);
 32a:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
}
 32e:	08 95       	ret

00000330 <LCD_String>:
void      LCD_String(char  x, char y, char *String)
{
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ea 01       	movw	r28, r20
            LCD_Char_xy(x,   y);
 33a:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_Char_xy>
            while(*String){
 33e:	88 81       	ld	r24, Y
 340:	88 23       	and	r24, r24
 342:	59 f0       	breq	.+22     	; 0x35a <LCD_String+0x2a>
 344:	0a ef       	ldi	r16, 0xFA	; 250
 346:	10 e0       	ldi	r17, 0x00	; 0
                 LCD_Data(*String++);
 348:	21 96       	adiw	r28, 0x01	; 1
 34a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Data>
 34e:	c8 01       	movw	r24, r16
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCD_String+0x20>
            LCD_Command(pos);
}
void      LCD_String(char  x, char y, char *String)
{
            LCD_Char_xy(x,   y);
            while(*String){
 354:	88 81       	ld	r24, Y
 356:	88 23       	and	r24, r24
 358:	b9 f7       	brne	.-18     	; 0x348 <LCD_String+0x18>
                 LCD_Data(*String++);
                 _delay_ms(1);
            }
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	08 95       	ret

00000364 <LCD_Scroll>:
void      LCD_Scroll(char  Direction)
{
            uint8_t   shift  =  0;                        // 0000 0110
            if(Direction == 1)   shift  =  0x1C;   // 0001 1100
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	31 f0       	breq	.+12     	; 0x374 <LCD_Scroll+0x10>
            if(Direction == 0)   shift  =  0x18;   // 0001 1000
 368:	88 23       	and	r24, r24
 36a:	41 f4       	brne	.+16     	; 0x37c <LCD_Scroll+0x18>
 36c:	88 e1       	ldi	r24, 0x18	; 24
            LCD_Command(shift);
 36e:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
}
 372:	08 95       	ret
            }
}
void      LCD_Scroll(char  Direction)
{
            uint8_t   shift  =  0;                        // 0000 0110
            if(Direction == 1)   shift  =  0x1C;   // 0001 1100
 374:	8c e1       	ldi	r24, 0x1C	; 28
            if(Direction == 0)   shift  =  0x18;   // 0001 1000
            LCD_Command(shift);
 376:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
}
 37a:	08 95       	ret
}
void      LCD_Scroll(char  Direction)
{
            uint8_t   shift  =  0;                        // 0000 0110
            if(Direction == 1)   shift  =  0x1C;   // 0001 1100
            if(Direction == 0)   shift  =  0x18;   // 0001 1000
 37c:	80 e0       	ldi	r24, 0x00	; 0
            LCD_Command(shift);
 37e:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Command>
}
 382:	08 95       	ret

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>
