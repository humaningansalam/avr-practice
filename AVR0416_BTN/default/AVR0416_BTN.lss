
AVR0416_BTN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000038  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000158  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000cc  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000015d  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d7  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  00000643  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ef       	ldi	r30, 0xFC	; 252
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  b6:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <LED_Init>:
#include <avr/io.h>
#include <util/delay.h>

void LED_Init(void)
{
	DDRF =  0xFC;
  be:	8c ef       	ldi	r24, 0xFC	; 252
  c0:	80 93 61 00 	sts	0x0061, r24
	PORTF = 0xFC;
  c4:	80 93 62 00 	sts	0x0062, r24
}
  c8:	08 95       	ret

000000ca <BUTTON_Init>:

void BUTTON_Init(void)
{
	DDRE = 0x0F;
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	82 b9       	out	0x02, r24	; 2
	PORTE = 0xF0;
  ce:	80 ef       	ldi	r24, 0xF0	; 240
  d0:	83 b9       	out	0x03, r24	; 3
}
  d2:	08 95       	ret

000000d4 <main>:
#include <avr/io.h>
#include <util/delay.h>

void LED_Init(void)
{
	DDRF =  0xFC;
  d4:	8c ef       	ldi	r24, 0xFC	; 252
  d6:	80 93 61 00 	sts	0x0061, r24
	PORTF = 0xFC;
  da:	80 93 62 00 	sts	0x0062, r24
}

void BUTTON_Init(void)
{
	DDRE = 0x0F;
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	82 b9       	out	0x02, r24	; 2
	PORTE = 0xF0;
  e2:	80 ef       	ldi	r24, 0xF0	; 240
  e4:	83 b9       	out	0x03, r24	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e6:	20 e1       	ldi	r18, 0x10	; 16
  e8:	37 e2       	ldi	r19, 0x27	; 39
  ea:	c9 01       	movw	r24, r18
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x18>
	LED_Init();
	BUTTON_Init();

	while(1){
		_delay_ms(40); //1000ms = 1sec, 40ms = 0.04sec
		PORTF = PINE;  //PORTF.4567 <--- PORTE : PINE.4567
  f0:	81 b1       	in	r24, 0x01	; 1
  f2:	80 93 62 00 	sts	0x0062, r24
  f6:	f9 cf       	rjmp	.-14     	; 0xea <main+0x16>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
