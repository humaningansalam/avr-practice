
AVR0430_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000001bc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080014e  0080014e  0000029e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009d  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000027b  00000000  00000000  0000035b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000165  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000203  00000000  00000000  0000073b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000e9  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  00000aa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 34       	cpi	r26, 0x4E	; 78
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ae e4       	ldi	r26, 0x4E	; 78
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 35       	cpi	r26, 0x50	; 80
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  c6:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <UART_Init>:
       }
       return  0;
}
void  UART_Init(void)
{                                        //1
        UCSR0A  =  0x00;  // 00(0)0 0000
  ce:	1b b8       	out	0x0b, r1	; 11
        UCSR0B  =  0x98;  // 1001 1000
  d0:	88 e9       	ldi	r24, 0x98	; 152
  d2:	8a b9       	out	0x0a, r24	; 10
        UCSR0C  =  0x06;  // 0000 0110
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 95 00 	sts	0x0095, r24
        UBRR0H =  0;       //  (8000000 / 614400) -1 = 12
  da:	10 92 90 00 	sts	0x0090, r1
        UBRR0L  =  12;     //  보드 시스템클럭 : 8MHz, 38400bps통신, 614400=16x38400
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	89 b9       	out	0x09, r24	; 9
}
  e2:	08 95       	ret

000000e4 <UART_PutChar>:
void  UART_PutChar(byte  Data)       //아스키코드 --> 1문자이다. Uart는 결국 아스키코드값을 통신한거다.
{                                                    // Data = 'k'   --> 'o'              
       while((UCSR0A & 0x20) == 0);   // 0000 0000   ---> 만약 참이면 --> 우체통에 편지가 남아있는 거다.
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <UART_PutChar>
       UDR0  =  Data;                        // 0010 0000  &  ---> 1 == 0 상태 --> false(우체통이 비어있다.)
  e8:	8c b9       	out	0x0c, r24	; 12
}
  ea:	08 95       	ret

000000ec <UART_PutString>:
void  UART_PutString(const char *String)  //const char *String = "korea"
{
  ec:	fc 01       	movw	r30, r24
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <UART_PutString+0xc>
        UBRR0H =  0;       //  (8000000 / 614400) -1 = 12
        UBRR0L  =  12;     //  보드 시스템클럭 : 8MHz, 38400bps통신, 614400=16x38400
}
void  UART_PutChar(byte  Data)       //아스키코드 --> 1문자이다. Uart는 결국 아스키코드값을 통신한거다.
{                                                    // Data = 'k'   --> 'o'              
       while((UCSR0A & 0x20) == 0);   // 0000 0000   ---> 만약 참이면 --> 우체통에 편지가 남아있는 거다.
  f0:	5d 9b       	sbis	0x0b, 5	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <UART_PutString+0x4>
       UDR0  =  Data;                        // 0010 0000  &  ---> 1 == 0 상태 --> false(우체통이 비어있다.)
  f4:	8c b9       	out	0x0c, r24	; 12
}
void  UART_PutString(const char *String)  //const char *String = "korea"
{
        while(*String){                                //포인터변수 기능 4가지  --> 1. 주소를 기억시킨다. (int* ptr = &a;)
            UART_PutChar(*String);               //                                       2. 값 -- 읽기 기능  ( *String )       
            String++;                                   //                                       3. 값 -- 저장 기능  ( *String = *ptr;)
  f6:	31 96       	adiw	r30, 0x01	; 1
       while((UCSR0A & 0x20) == 0);   // 0000 0000   ---> 만약 참이면 --> 우체통에 편지가 남아있는 거다.
       UDR0  =  Data;                        // 0010 0000  &  ---> 1 == 0 상태 --> false(우체통이 비어있다.)
}
void  UART_PutString(const char *String)  //const char *String = "korea"
{
        while(*String){                                //포인터변수 기능 4가지  --> 1. 주소를 기억시킨다. (int* ptr = &a;)
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	c9 f7       	brne	.-14     	; 0xf0 <UART_PutString+0x4>
            UART_PutChar(*String);               //                                       2. 값 -- 읽기 기능  ( *String )       
            String++;                                   //                                       3. 값 -- 저장 기능  ( *String = *ptr;)
        }                                                   //                                       4.  주소 -- 읽기/저장/증가/감소( ptr =  string)
}
  fe:	08 95       	ret

00000100 <UART_GetChar>:
byte  UART_GetChar(byte  *Data)
{
 100:	fc 01       	movw	r30, r24
        if(UART_Flag){
 102:	80 91 4e 01 	lds	r24, 0x014E
 106:	88 23       	and	r24, r24
 108:	31 f0       	breq	.+12     	; 0x116 <UART_GetChar+0x16>
           *Data         =  UART_Buffer;
 10a:	80 91 4f 01 	lds	r24, 0x014F
 10e:	80 83       	st	Z, r24
           UART_Flag  =  0;
 110:	10 92 4e 01 	sts	0x014E, r1
 114:	81 e0       	ldi	r24, 0x01	; 1
          return  1;
       }else{
          return  0;
       }
}
 116:	08 95       	ret

00000118 <__vector_18>:
ISR(USART0_RX_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
     UART_Buffer  =  UDR0;
 124:	8c b1       	in	r24, 0x0c	; 12
 126:	80 93 4f 01 	sts	0x014F, r24
     UART_Flag     =  1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 4e 01 	sts	0x014E, r24
}
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <UART_Control>:
            String++;                                   //                                       3. 값 -- 저장 기능  ( *String = *ptr;)
        }                                                   //                                       4.  주소 -- 읽기/저장/증가/감소( ptr =  string)
}
byte  UART_GetChar(byte  *Data)
{
        if(UART_Flag){
 13c:	80 91 4e 01 	lds	r24, 0x014E
 140:	88 23       	and	r24, r24
 142:	39 f0       	breq	.+14     	; 0x152 <UART_Control+0x16>
           *Data         =  UART_Buffer;
 144:	80 91 4f 01 	lds	r24, 0x014F
           UART_Flag  =  0;
 148:	10 92 4e 01 	sts	0x014E, r1
        UBRR0H =  0;       //  (8000000 / 614400) -1 = 12
        UBRR0L  =  12;     //  보드 시스템클럭 : 8MHz, 38400bps통신, 614400=16x38400
}
void  UART_PutChar(byte  Data)       //아스키코드 --> 1문자이다. Uart는 결국 아스키코드값을 통신한거다.
{                                                    // Data = 'k'   --> 'o'              
       while((UCSR0A & 0x20) == 0);   // 0000 0000   ---> 만약 참이면 --> 우체통에 편지가 남아있는 거다.
 14c:	5d 9b       	sbis	0x0b, 5	; 11
 14e:	fe cf       	rjmp	.-4      	; 0x14c <UART_Control+0x10>
       UDR0  =  Data;                        // 0010 0000  &  ---> 1 == 0 상태 --> false(우체통이 비어있다.)
 150:	8c b9       	out	0x0c, r24	; 12
 152:	08 95       	ret

00000154 <main>:
       }
       return  0;
}
void  UART_Init(void)
{                                        //1
        UCSR0A  =  0x00;  // 00(0)0 0000
 154:	1b b8       	out	0x0b, r1	; 11
        UCSR0B  =  0x98;  // 1001 1000
 156:	88 e9       	ldi	r24, 0x98	; 152
 158:	8a b9       	out	0x0a, r24	; 10
        UCSR0C  =  0x06;  // 0000 0110
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	80 93 95 00 	sts	0x0095, r24
        UBRR0H =  0;       //  (8000000 / 614400) -1 = 12
 160:	10 92 90 00 	sts	0x0090, r1
        UBRR0L  =  12;     //  보드 시스템클럭 : 8MHz, 38400bps통신, 614400=16x38400
 164:	8c e0       	ldi	r24, 0x0C	; 12
 166:	89 b9       	out	0x09, r24	; 9
}
void  UART_PutChar(byte  Data)       //아스키코드 --> 1문자이다. Uart는 결국 아스키코드값을 통신한거다.
{                                                    // Data = 'k'   --> 'o'              
       while((UCSR0A & 0x20) == 0);   // 0000 0000   ---> 만약 참이면 --> 우체통에 편지가 남아있는 거다.
 168:	5d 9b       	sbis	0x0b, 5	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <main+0x14>
       UDR0  =  Data;                        // 0010 0000  &  ---> 1 == 0 상태 --> false(우체통이 비어있다.)
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	8c b9       	out	0x0c, r24	; 12
        UBRR0H =  0;       //  (8000000 / 614400) -1 = 12
        UBRR0L  =  12;     //  보드 시스템클럭 : 8MHz, 38400bps통신, 614400=16x38400
}
void  UART_PutChar(byte  Data)       //아스키코드 --> 1문자이다. Uart는 결국 아스키코드값을 통신한거다.
{                                                    // Data = 'k'   --> 'o'              
       while((UCSR0A & 0x20) == 0);   // 0000 0000   ---> 만약 참이면 --> 우체통에 편지가 남아있는 거다.
 170:	5d 9b       	sbis	0x0b, 5	; 11
 172:	fe cf       	rjmp	.-4      	; 0x170 <main+0x1c>
       UDR0  =  Data;                        // 0010 0000  &  ---> 1 == 0 상태 --> false(우체통이 비어있다.)
 174:	86 e5       	ldi	r24, 0x56	; 86
 176:	8c b9       	out	0x0c, r24	; 12
        UBRR0H =  0;       //  (8000000 / 614400) -1 = 12
        UBRR0L  =  12;     //  보드 시스템클럭 : 8MHz, 38400bps통신, 614400=16x38400
}
void  UART_PutChar(byte  Data)       //아스키코드 --> 1문자이다. Uart는 결국 아스키코드값을 통신한거다.
{                                                    // Data = 'k'   --> 'o'              
       while((UCSR0A & 0x20) == 0);   // 0000 0000   ---> 만약 참이면 --> 우체통에 편지가 남아있는 거다.
 178:	5d 9b       	sbis	0x0b, 5	; 11
 17a:	fe cf       	rjmp	.-4      	; 0x178 <main+0x24>
       UDR0  =  Data;                        // 0010 0000  &  ---> 1 == 0 상태 --> false(우체통이 비어있다.)
 17c:	82 e5       	ldi	r24, 0x52	; 82
 17e:	8c b9       	out	0x0c, r24	; 12
        UBRR0H =  0;       //  (8000000 / 614400) -1 = 12
        UBRR0L  =  12;     //  보드 시스템클럭 : 8MHz, 38400bps통신, 614400=16x38400
}
void  UART_PutChar(byte  Data)       //아스키코드 --> 1문자이다. Uart는 결국 아스키코드값을 통신한거다.
{                                                    // Data = 'k'   --> 'o'              
       while((UCSR0A & 0x20) == 0);   // 0000 0000   ---> 만약 참이면 --> 우체통에 편지가 남아있는 거다.
 180:	5d 9b       	sbis	0x0b, 5	; 11
 182:	fe cf       	rjmp	.-4      	; 0x180 <main+0x2c>
       UDR0  =  Data;                        // 0010 0000  &  ---> 1 == 0 상태 --> false(우체통이 비어있다.)
 184:	8d e0       	ldi	r24, 0x0D	; 13
 186:	8c b9       	out	0x0c, r24	; 12
        UBRR0H =  0;       //  (8000000 / 614400) -1 = 12
        UBRR0L  =  12;     //  보드 시스템클럭 : 8MHz, 38400bps통신, 614400=16x38400
}
void  UART_PutChar(byte  Data)       //아스키코드 --> 1문자이다. Uart는 결국 아스키코드값을 통신한거다.
{                                                    // Data = 'k'   --> 'o'              
       while((UCSR0A & 0x20) == 0);   // 0000 0000   ---> 만약 참이면 --> 우체통에 편지가 남아있는 거다.
 188:	5d 9b       	sbis	0x0b, 5	; 11
 18a:	fe cf       	rjmp	.-4      	; 0x188 <main+0x34>
       UDR0  =  Data;                        // 0010 0000  &  ---> 1 == 0 상태 --> false(우체통이 비어있다.)
 18c:	8a e0       	ldi	r24, 0x0A	; 10
 18e:	8c b9       	out	0x0c, r24	; 12

int    main(void)
{
       UART_Init();
       UART_PutChar('A');  UART_PutChar('V');  UART_PutChar('R');  UART_PutChar('\r');  UART_PutChar('\n');
       UART_PutString("===============");
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 76 00 	call	0xec	; 0xec <UART_PutString>
       UART_PutString("\r\nATmega128 Test Programming");
 198:	80 e1       	ldi	r24, 0x10	; 16
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 76 00 	call	0xec	; 0xec <UART_PutString>
       UART_PutString("\r\nWelcome!!");
 1a0:	8d e2       	ldi	r24, 0x2D	; 45
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 76 00 	call	0xec	; 0xec <UART_PutString>
       UART_PutString("\r\n===============\r\n");
 1a8:	89 e3       	ldi	r24, 0x39	; 57
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 76 00 	call	0xec	; 0xec <UART_PutString>
       sei();
 1b0:	78 94       	sei
       while(1){
               UART_Control();
 1b2:	0e 94 9e 00 	call	0x13c	; 0x13c <UART_Control>
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <main+0x5e>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
